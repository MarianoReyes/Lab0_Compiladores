# Generated from ArithmeticGrammar.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,9,69,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,1,0,4,0,21,8,0,11,0,12,0,22,1,0,1,0,1,1,1,
        1,5,1,29,8,1,10,1,12,1,32,9,1,1,2,4,2,35,8,2,11,2,12,2,36,1,2,1,
        2,4,2,41,8,2,11,2,12,2,42,3,2,45,8,2,1,2,1,2,3,2,49,8,2,1,2,4,2,
        52,8,2,11,2,12,2,53,3,2,56,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
        7,1,7,1,8,1,8,0,0,9,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,1,0,
        5,3,0,9,10,13,13,32,32,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,
        0,48,57,2,0,43,43,45,45,76,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,1,20,1,0,0,0,3,26,1,0,0,0,5,34,1,0,0,0,7,57,1,0,0,0,9,59,
        1,0,0,0,11,61,1,0,0,0,13,63,1,0,0,0,15,65,1,0,0,0,17,67,1,0,0,0,
        19,21,7,0,0,0,20,19,1,0,0,0,21,22,1,0,0,0,22,20,1,0,0,0,22,23,1,
        0,0,0,23,24,1,0,0,0,24,25,6,0,0,0,25,2,1,0,0,0,26,30,7,1,0,0,27,
        29,7,2,0,0,28,27,1,0,0,0,29,32,1,0,0,0,30,28,1,0,0,0,30,31,1,0,0,
        0,31,4,1,0,0,0,32,30,1,0,0,0,33,35,7,3,0,0,34,33,1,0,0,0,35,36,1,
        0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,44,1,0,0,0,38,40,5,46,0,0,39,
        41,7,3,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,
        0,43,45,1,0,0,0,44,38,1,0,0,0,44,45,1,0,0,0,45,55,1,0,0,0,46,48,
        5,69,0,0,47,49,7,4,0,0,48,47,1,0,0,0,48,49,1,0,0,0,49,51,1,0,0,0,
        50,52,7,3,0,0,51,50,1,0,0,0,52,53,1,0,0,0,53,51,1,0,0,0,53,54,1,
        0,0,0,54,56,1,0,0,0,55,46,1,0,0,0,55,56,1,0,0,0,56,6,1,0,0,0,57,
        58,5,43,0,0,58,8,1,0,0,0,59,60,5,45,0,0,60,10,1,0,0,0,61,62,5,42,
        0,0,62,12,1,0,0,0,63,64,5,47,0,0,64,14,1,0,0,0,65,66,5,40,0,0,66,
        16,1,0,0,0,67,68,5,41,0,0,68,18,1,0,0,0,9,0,22,30,36,42,44,48,53,
        55,1,6,0,0
    ]

class ArithmeticGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    ID = 2
    NUMBER = 3
    PLUS = 4
    MINUS = 5
    TIMES = 6
    DIV = 7
    LPAREN = 8
    RPAREN = 9

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "ID", "NUMBER", "PLUS", "MINUS", "TIMES", "DIV", "LPAREN", 
            "RPAREN" ]

    ruleNames = [ "WS", "ID", "NUMBER", "PLUS", "MINUS", "TIMES", "DIV", 
                  "LPAREN", "RPAREN" ]

    grammarFileName = "ArithmeticGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


