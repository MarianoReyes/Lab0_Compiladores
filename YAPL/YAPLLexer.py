# Generated from C:/Users/lp109/OneDrive/Documentos/0lps/01 U/0LaU/000Octavo semestre/Compis/labs/Lab0_Compiladores/YAPL.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,300,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,
        14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,
        20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
        22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,
        36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,5,38,250,8,38,10,38,12,38,
        253,9,38,1,39,4,39,256,8,39,11,39,12,39,257,1,40,1,40,1,40,1,40,
        5,40,264,8,40,10,40,12,40,267,9,40,1,40,1,40,1,41,4,41,272,8,41,
        11,41,12,41,273,1,41,1,41,1,42,1,42,1,42,1,42,5,42,282,8,42,10,42,
        12,42,285,9,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,44,1,44,5,44,
        296,8,44,10,44,12,44,299,9,44,1,283,0,45,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,1,0,8,1,0,97,122,3,0,48,57,65,
        90,97,122,1,0,48,57,4,0,10,10,13,13,34,34,92,92,8,0,34,34,47,47,
        92,92,98,98,102,102,110,110,114,114,116,116,3,0,9,10,13,13,32,32,
        3,0,42,43,45,45,47,47,1,0,65,90,306,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,97,1,0,0,0,5,106,
        1,0,0,0,7,108,1,0,0,0,9,110,1,0,0,0,11,112,1,0,0,0,13,115,1,0,0,
        0,15,117,1,0,0,0,17,119,1,0,0,0,19,121,1,0,0,0,21,123,1,0,0,0,23,
        133,1,0,0,0,25,137,1,0,0,0,27,144,1,0,0,0,29,149,1,0,0,0,31,152,
        1,0,0,0,33,159,1,0,0,0,35,162,1,0,0,0,37,167,1,0,0,0,39,172,1,0,
        0,0,41,175,1,0,0,0,43,181,1,0,0,0,45,186,1,0,0,0,47,191,1,0,0,0,
        49,195,1,0,0,0,51,198,1,0,0,0,53,200,1,0,0,0,55,202,1,0,0,0,57,209,
        1,0,0,0,59,213,1,0,0,0,61,218,1,0,0,0,63,224,1,0,0,0,65,231,1,0,
        0,0,67,233,1,0,0,0,69,235,1,0,0,0,71,238,1,0,0,0,73,241,1,0,0,0,
        75,244,1,0,0,0,77,247,1,0,0,0,79,255,1,0,0,0,81,259,1,0,0,0,83,271,
        1,0,0,0,85,277,1,0,0,0,87,291,1,0,0,0,89,293,1,0,0,0,91,92,5,99,
        0,0,92,93,5,108,0,0,93,94,5,97,0,0,94,95,5,115,0,0,95,96,5,115,0,
        0,96,2,1,0,0,0,97,98,5,105,0,0,98,99,5,110,0,0,99,100,5,104,0,0,
        100,101,5,101,0,0,101,102,5,114,0,0,102,103,5,105,0,0,103,104,5,
        116,0,0,104,105,5,115,0,0,105,4,1,0,0,0,106,107,5,123,0,0,107,6,
        1,0,0,0,108,109,5,125,0,0,109,8,1,0,0,0,110,111,5,58,0,0,111,10,
        1,0,0,0,112,113,5,60,0,0,113,114,5,45,0,0,114,12,1,0,0,0,115,116,
        5,59,0,0,116,14,1,0,0,0,117,118,5,40,0,0,118,16,1,0,0,0,119,120,
        5,41,0,0,120,18,1,0,0,0,121,122,5,44,0,0,122,20,1,0,0,0,123,124,
        5,83,0,0,124,125,5,69,0,0,125,126,5,76,0,0,126,127,5,70,0,0,127,
        128,5,95,0,0,128,129,5,84,0,0,129,130,5,89,0,0,130,131,5,80,0,0,
        131,132,5,69,0,0,132,22,1,0,0,0,133,134,5,73,0,0,134,135,5,110,0,
        0,135,136,5,116,0,0,136,24,1,0,0,0,137,138,5,83,0,0,138,139,5,116,
        0,0,139,140,5,114,0,0,140,141,5,105,0,0,141,142,5,110,0,0,142,143,
        5,103,0,0,143,26,1,0,0,0,144,145,5,66,0,0,145,146,5,111,0,0,146,
        147,5,111,0,0,147,148,5,108,0,0,148,28,1,0,0,0,149,150,5,73,0,0,
        150,151,5,79,0,0,151,30,1,0,0,0,152,153,5,79,0,0,153,154,5,98,0,
        0,154,155,5,106,0,0,155,156,5,101,0,0,156,157,5,99,0,0,157,158,5,
        116,0,0,158,32,1,0,0,0,159,160,5,105,0,0,160,161,5,102,0,0,161,34,
        1,0,0,0,162,163,5,116,0,0,163,164,5,104,0,0,164,165,5,101,0,0,165,
        166,5,110,0,0,166,36,1,0,0,0,167,168,5,101,0,0,168,169,5,108,0,0,
        169,170,5,115,0,0,170,171,5,101,0,0,171,38,1,0,0,0,172,173,5,102,
        0,0,173,174,5,105,0,0,174,40,1,0,0,0,175,176,5,119,0,0,176,177,5,
        104,0,0,177,178,5,105,0,0,178,179,5,108,0,0,179,180,5,101,0,0,180,
        42,1,0,0,0,181,182,5,108,0,0,182,183,5,111,0,0,183,184,5,111,0,0,
        184,185,5,112,0,0,185,44,1,0,0,0,186,187,5,112,0,0,187,188,5,111,
        0,0,188,189,5,111,0,0,189,190,5,108,0,0,190,46,1,0,0,0,191,192,5,
        108,0,0,192,193,5,101,0,0,193,194,5,116,0,0,194,48,1,0,0,0,195,196,
        5,105,0,0,196,197,5,110,0,0,197,50,1,0,0,0,198,199,5,46,0,0,199,
        52,1,0,0,0,200,201,5,64,0,0,201,54,1,0,0,0,202,203,5,105,0,0,203,
        204,5,115,0,0,204,205,5,118,0,0,205,206,5,111,0,0,206,207,5,105,
        0,0,207,208,5,100,0,0,208,56,1,0,0,0,209,210,5,110,0,0,210,211,5,
        101,0,0,211,212,5,119,0,0,212,58,1,0,0,0,213,214,5,116,0,0,214,215,
        5,114,0,0,215,216,5,117,0,0,216,217,5,101,0,0,217,60,1,0,0,0,218,
        219,5,102,0,0,219,220,5,97,0,0,220,221,5,108,0,0,221,222,5,115,0,
        0,222,223,5,101,0,0,223,62,1,0,0,0,224,225,5,114,0,0,225,226,5,101,
        0,0,226,227,5,116,0,0,227,228,5,117,0,0,228,229,5,114,0,0,229,230,
        5,110,0,0,230,64,1,0,0,0,231,232,5,60,0,0,232,66,1,0,0,0,233,234,
        5,62,0,0,234,68,1,0,0,0,235,236,5,60,0,0,236,237,5,61,0,0,237,70,
        1,0,0,0,238,239,5,62,0,0,239,240,5,61,0,0,240,72,1,0,0,0,241,242,
        5,61,0,0,242,243,5,61,0,0,243,74,1,0,0,0,244,245,5,33,0,0,245,246,
        5,61,0,0,246,76,1,0,0,0,247,251,7,0,0,0,248,250,7,1,0,0,249,248,
        1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,78,1,
        0,0,0,253,251,1,0,0,0,254,256,7,2,0,0,255,254,1,0,0,0,256,257,1,
        0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,80,1,0,0,0,259,265,5,34,
        0,0,260,264,8,3,0,0,261,262,5,92,0,0,262,264,7,4,0,0,263,260,1,0,
        0,0,263,261,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,
        0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,5,34,0,0,269,82,1,0,
        0,0,270,272,7,5,0,0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,0,
        0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,6,41,0,0,276,84,1,0,
        0,0,277,278,5,47,0,0,278,279,5,42,0,0,279,283,1,0,0,0,280,282,9,
        0,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,284,1,0,0,0,283,281,1,
        0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,5,42,0,0,287,288,5,
        47,0,0,288,289,1,0,0,0,289,290,6,42,0,0,290,86,1,0,0,0,291,292,7,
        6,0,0,292,88,1,0,0,0,293,297,7,7,0,0,294,296,7,1,0,0,295,294,1,0,
        0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,90,1,0,0,
        0,299,297,1,0,0,0,8,0,251,257,263,265,273,283,297,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    ID = 39
    INT = 40
    STRING = 41
    WS = 42
    COMMENT = 43
    OP = 44
    CLASS_ID = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'inherits'", "'{'", "'}'", "':'", "'<-'", "';'", 
            "'('", "')'", "','", "'SELF_TYPE'", "'Int'", "'String'", "'Bool'", 
            "'IO'", "'Object'", "'if'", "'then'", "'else'", "'fi'", "'while'", 
            "'loop'", "'pool'", "'let'", "'in'", "'.'", "'@'", "'isvoid'", 
            "'new'", "'true'", "'false'", "'return'", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "STRING", "WS", "COMMENT", "OP", "CLASS_ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "ID", "INT", "STRING", "WS", "COMMENT", "OP", "CLASS_ID" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


